package net.irules.ibackpacks.settings;

import lombok.*;
import net.irules.ibackpacks.utils.Base64;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.mineacademy.fo.collection.SerializedMap;
import org.mineacademy.fo.model.ConfigSerializable;
import org.mineacademy.fo.settings.YamlConfig;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * This class handles the stored data of the backpacks. We serialize the inventory and store it under a UUID in the /backpacks folder.
 */
@Getter
public class BackpackData extends YamlConfig {
	private static String uuid;
	private BackPackInventory backPackInventory;
	private Inventory inventory;
	private static Map<String, BackpackData> backPackDataMap = new HashMap<>();

	/**
	 * Here happens the actual serialization of the inventory.
	 */
	@Getter
	@ToString
	@AllArgsConstructor(access = AccessLevel.PRIVATE)
	@NoArgsConstructor(access = AccessLevel.PRIVATE)
	public static class BackPackInventory implements ConfigSerializable {
		private Inventory inventory;

		/**
		 * Serialize the backpack inventory.
		 *
		 * @return SerializedMap
		 */
		@Override
		public SerializedMap serialize() {
			SerializedMap map = new SerializedMap();

			map.put("Inventory", Base64.toBase64(inventory));

			return map;
		}

		/**
		 * Deserialize the map into the inventory.
		 *
		 * @param map
		 * @return inventory
		 * @throws IOException
		 */
		public static BackPackInventory deserialize(SerializedMap map) throws IOException {
			BackPackInventory backPackInventory = new BackPackInventory();

			backPackInventory.inventory = Base64.fromBase64(map.getString("Inventory"));

			return backPackInventory;
		}
	}

	private BackpackData(String uuid) {
		BackpackData.uuid = uuid;
		setHeader("BackPackData", "This file stores the data of the backpack with the UUID: " + uuid + " .", "Do not edit this file unless you know what you are doing.");
		loadConfiguration(NO_DEFAULT, "backpacks/" + uuid + ".yml");
		save();
	}

	@Override
	protected void onLoad() {
		backPackInventory = get("BackPackInventory", BackPackInventory.class);
	}

	@Override
	protected void onSave() {
		set("BackPackInventory", backPackInventory);
	}

	public void setBackPackInventory(Inventory inventory) {
		backPackInventory = new BackPackInventory(inventory);
		save();
	}

	public static BackpackData from(String uuid) {
		BackpackData data = backPackDataMap.get(uuid);

		if (data == null) {
			data = new BackpackData(uuid);
			data.setBackPackInventory(Bukkit.createInventory(null, 54, "Backpack"));

			backPackDataMap.put(uuid, data);
		}

		return data;
	}
}
